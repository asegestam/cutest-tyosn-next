import { Tyson } from "@prisma/client";
import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import TysonCard from "../components/tyson";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const {
    data: pair,
    refetch,
    isLoading,
  } = trpc.useQuery(["tyson.pair"], {
    refetchInterval: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false,
    refetchOnMount: false,
  });

  const voteMutation = trpc.useMutation(["tyson.vote"]);

  const fetchingNext = voteMutation.isLoading || isLoading;

  const voteForTyson = async (votedFor: Tyson) => {
    if (!pair) {
      return;
    }

    if (votedFor.id === pair.firstTyson.id) {
      voteMutation.mutate({
        votedFor: pair.firstTyson.id,
        votedAgainst: pair.secondTyson.id,
      });
    } else {
      voteMutation.mutate({
        votedFor: pair.secondTyson.id,
        votedAgainst: pair.firstTyson.id,
      });
    }

    refetch();
  };

  return (
    <>
      <Head>
        <title>Cutest Tyson</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <h1 className="text-center text-3xl mt-4 select-none">
        Which
        <span className="text-green-600"> Tyson</span> is cuter?
      </h1>

      <div className="flex flex-col sm:flex-row justify-evenly items-center m-2 mt-6">
        {!pair && <div>Loading...</div>}
        {pair && (
          <>
            <TysonCard
              tyson={pair.firstTyson}
              vote={() => voteForTyson(pair.firstTyson)}
              disabled={fetchingNext}
              key={pair.firstTyson.id}
            />
            <span className="italic">or</span>
            <TysonCard
              tyson={pair.secondTyson}
              vote={() => voteForTyson(pair.secondTyson)}
              disabled={fetchingNext}
              key={pair.secondTyson.id}
            />
          </>
        )}
      </div>
      <div className="flex justify-center sm:mt-0">
        <Link href="results">
          <a>
            <div className="flex justify-center w-50 mt-20 px-6 py-2 bg-green-600 hover:bg-green-500  rounded shadow-sm shadow-slate-900 select-none">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6 mr-2"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                />
              </svg>
              Results
            </div>
          </a>
        </Link>
      </div>
    </>
  );
};

export default Home;
