import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { prisma } from "../server/db/client";
import { clsx } from "clsx";
import Link from "next/link";

export const getStaticProps: GetServerSideProps = async (context) => {
  return {
    props: {
      tysons: await getOrderedTysons(),
    },
    revalidate: 1,
  };
};

const getOrderedTysons = async () => {
  return await prisma.tyson.findMany({
    orderBy: {
      VoteFor: { _count: "desc" },
    },
    select: {
      id: true,
      name: true,
      imgPath: true,
      _count: {
        select: {
          VoteFor: true,
          VoteAgainst: true,
        },
      },
    },
  });
};

export type AsyncReturnType<T extends (...args: any) => Promise<any>> =
  T extends (...args: any) => Promise<infer R> ? R : any;

type TysonQueryResult = AsyncReturnType<typeof getOrderedTysons>;

const generateVotePercentage = (tyson: TysonQueryResult[number]) => {
  const { VoteFor, VoteAgainst } = tyson._count;
  if (VoteFor + VoteAgainst === 0) {
    return 0;
  }

  return (VoteFor / (VoteFor + VoteAgainst)) * 100;
};

const Home: NextPage<{ tysons: TysonQueryResult }> = (props) => {
  return (
    <>
      <Head>
        <title>Cutest Tyson - Results</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/">
        <a>
          <div className="ml-1 mt-2 bg-green-400 dark:bg-green-600 p-2 float-left rounded text-sm absolute left-0 top-0">
            Go Back
          </div>
        </a>
      </Link>
      <div className="flex flex-col items-center">
        <div className="flex flex-row">
          <h1 className="text-2xl my-5">Results</h1>
        </div>
        <div className="flex flex-col w-full max-w-2xl border border-slate-300">
          {props.tysons
            .sort((a, b) => {
              const difference =
                generateVotePercentage(b) - generateVotePercentage(a);

              if (difference === 0) {
                return b._count.VoteFor - a._count.VoteFor;
              }

              return difference;
            })
            .map((tyson, index) => {
              const votePercentage = generateVotePercentage(tyson);

              return (
                <div
                  key={tyson.id}
                  className="relative flex border-b border-slate-300 p-2 items-center justify-between"
                >
                  <div className="flex items-center">
                    <div className="flex items-center pl-4">
                      <Image
                        src={tyson.imgPath}
                        width={64}
                        height={64}
                        quality={50}
                        className="w-16 h-16 object-cover rounded ml-2"
                      />
                      <div className="pl-2 capitalize">{tyson.name}</div>
                    </div>
                  </div>
                  <div
                    className={clsx({
                      "pr-4": true,
                      "text-green-400": votePercentage > 50,
                      "text-red-600": votePercentage <= 50,
                    })}
                  >
                    {votePercentage.toFixed(2) + "%"}
                  </div>
                  <div className="absolute top-0 left-0 z-20 flex items-center justify-center px-2 font-semibold text-white bg-gray-600 border border-gray-500 shadow-lg rounded-br-md">
                    {index + 1}
                  </div>
                </div>
              );
            })}
        </div>
      </div>
    </>
  );
};

export default Home;
