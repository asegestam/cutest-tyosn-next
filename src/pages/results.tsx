import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { prisma } from "../server/db/client";
import { clsx } from "clsx";
import Link from "next/link";
import {
  Badge,
  Button,
  Divider,
  IconButton,
  Table,
  TableContainer,
  Tbody,
  Td,
  Tooltip,
  Tr,
} from "@chakra-ui/react";
import { FaArrowLeft } from "react-icons/fa";

export const getStaticProps: GetServerSideProps = async (context) => {
  return {
    props: {
      tysons: await getOrderedTysons(),
    },
    revalidate: 1,
  };
};

const getOrderedTysons = async () => {
  return await prisma.tyson.findMany({
    orderBy: {
      VoteFor: { _count: "desc" },
    },
    select: {
      id: true,
      name: true,
      imgPath: true,
      _count: {
        select: {
          VoteFor: true,
          VoteAgainst: true,
        },
      },
    },
  });
};

export type AsyncReturnType<T extends (...args: any) => Promise<any>> =
  T extends (...args: any) => Promise<infer R> ? R : any;

type TysonQueryResult = AsyncReturnType<typeof getOrderedTysons>;

const generateVotePercentage = (tyson: TysonQueryResult[number]) => {
  const { VoteFor, VoteAgainst } = tyson._count;
  if (VoteFor + VoteAgainst === 0) {
    return 0;
  }

  return (VoteFor / (VoteFor + VoteAgainst)) * 100;
};

const Home: NextPage<{ tysons: TysonQueryResult }> = (props) => {
  return (
    <>
      <Head>
        <title>Cutest Tyson - Results</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/">
        <IconButton
          colorScheme="green"
          icon={<FaArrowLeft />}
          aria-label={"Go back"}
          className="mt-4 ml-2"
        />
      </Link>
      <div className="flex flex-col items-center">
        <h1 className="text-3xl my-5">Results</h1>
        <Divider />
        <TableContainer>
          <Table size="lg">
            <Tbody>
              {props.tysons
                .sort((a, b) => {
                  const difference =
                    generateVotePercentage(b) - generateVotePercentage(a);

                  if (difference === 0) {
                    return b._count.VoteFor - a._count.VoteFor;
                  }

                  return difference;
                })
                .map((tyson, index) => {
                  const votePercentage = generateVotePercentage(tyson);
                  return (
                    <Tr key={tyson.id}>
                      <Td>
                        <div className="relative flex items-center justify-between">
                          <div className="flex items-center">
                            <Badge variant="subtle" className="mr-4 text-xl">
                              <span className="px-1">{index + 1}</span>
                            </Badge>
                            <Image
                              src={tyson.imgPath}
                              width={64}
                              height={64}
                              quality={50}
                              className="w-16 h-16 object-cover rounded ml-2"
                            />
                            <p className="pl-2 text-ellipsis overflow-hidden">
                              {tyson.name}
                            </p>
                          </div>
                          <div className="px-4">
                            {votePercentage >= 50 && (
                              <Tooltip label="Percentage this picture was voted cutest">
                                <Badge variant="subtle" colorScheme="green">
                                  {votePercentage.toFixed(2) + "%"}
                                </Badge>
                              </Tooltip>
                            )}
                            {votePercentage < 50 && (
                              <Tooltip label="Percentage this picture was voted cutest">
                                <Badge variant="subtle" colorScheme="red">
                                  {votePercentage.toFixed(2) + "%"}
                                </Badge>
                              </Tooltip>
                            )}
                          </div>
                        </div>
                      </Td>
                    </Tr>
                  );
                })}
            </Tbody>
          </Table>
        </TableContainer>
      </div>
    </>
  );
};

export default Home;
